from telebot.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from config import MANAGER_CHAT_ID
from state import (
    ongoing_conversations, add_conversation, get_manager_for_client,
    set_client_to_forward, get_client_to_forward, clear_client_to_forward,
    has_active_conversations
)

def register_messaging_handlers(bot):
    @bot.callback_query_handler(func=lambda call: call.data == "contact_manager")
    def contact_manager(call: CallbackQuery):
        client_id = call.message.chat.id

        bot.send_message(
            MANAGER_CHAT_ID,
            f"üì≤ –ö–ª–∏–µ–Ω—Ç {client_id} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏. –ù–∞–ø–∏—à–∏—Ç–µ –∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        bot.send_message(client_id, "üì© –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

        add_conversation(client_id, MANAGER_CHAT_ID)

        back_to_conversion_menu = InlineKeyboardMarkup()
        back_to_conversion_menu.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="conversion"))

        bot.edit_message_reply_markup(client_id, call.message.message_id, reply_markup=back_to_conversion_menu)

    @bot.callback_query_handler(func=lambda call: call.data == "contact_manager_in_menu")
    def contact_manager_from_menu(call: CallbackQuery):
        client_id = call.message.chat.id

        bot.send_message(MANAGER_CHAT_ID, f"üì≤ –ö–ª–∏–µ–Ω—Ç {client_id} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.")
        bot.send_message(client_id, "üì© –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

        add_conversation(client_id, MANAGER_CHAT_ID)

        back_to_main_menu = InlineKeyboardMarkup()
        back_to_main_menu.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main"))

        bot.edit_message_reply_markup(client_id, call.message.message_id, reply_markup=back_to_main_menu)

    @bot.message_handler(commands=['clients'], func=lambda msg: msg.chat.id == MANAGER_CHAT_ID)
    def show_active_clients(msg: Message):
        print("Processing /clients command...")

        if not has_active_conversations():
            bot.send_message(msg.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.")
            return

        markup = InlineKeyboardMarkup()

        for client_id in ongoing_conversations:
            try:
                bot.send_message(client_id, "üì© –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è!")

                user = bot.get_chat(client_id)
                markup.add(
                    InlineKeyboardButton(f"{user.first_name} ({client_id})", callback_data=f"client_{client_id}")
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–µ {client_id}: {e}")

        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è:", reply_markup=markup)

    @bot.message_handler(content_types=['text', 'photo', 'video', 'voice', 'document'],
                         func=lambda message: message.chat.id == MANAGER_CHAT_ID)
    def handle_manager_message(message: Message):
        if not ongoing_conversations:
            bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.")
            return

        client_id = get_client_to_forward(message.chat.id)

        if client_id is None:
            bot.send_message(message.chat.id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —ç—Ç–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º.")
            return

        try:
            if message.text:
                bot.send_message(client_id, f"üì© –ú–µ–Ω–µ–¥–∂–µ—Ä: {message.text}")
            elif message.photo:
                bot.send_photo(client_id, message.photo[-1].file_id, caption="üì∑ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            elif message.voice:
                bot.send_voice(client_id, message.voice.file_id, caption="üéô –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            elif message.document:
                bot.send_document(client_id, message.document.file_id, caption="üìÇ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞")

            clear_client_to_forward(message.chat.id)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")

    @bot.message_handler(content_types=['text', 'photo', 'video', 'voice', 'document'])
    def catch_all(message: Message):
        ongoing_conversations[message.chat.id] = {'manager_id': MANAGER_CHAT_ID, 'client_id': message.chat.id}

    @bot.callback_query_handler(func=lambda call: call.data.startswith("client_"))
    def forward_message_to_selected_client(call: CallbackQuery):
        client_id = int(call.data.split("_")[1])
        manager_id = call.message.chat.id

        set_client_to_forward(manager_id, client_id)
        bot.send_message(manager_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:")

    @bot.message_handler(content_types=['photo'],
                         func=lambda msg: msg.chat.id in ongoing_conversations and 'client_to_forward' in
                                          ongoing_conversations[msg.chat.id])
    def send_photo_to_client(msg: Message):
        client_to_forward = ongoing_conversations[msg.chat.id].get('client_to_forward')

        if client_to_forward:
            bot.send_photo(client_to_forward, msg.photo[-1].file_id, caption="üì∑ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            bot.send_message(msg.chat.id, "‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.")
            del ongoing_conversations[msg.chat.id]['client_to_forward']